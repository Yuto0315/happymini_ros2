#! /usr/bin/env python3
# -*- coding: utf-8 -*-
# Python
import yaml
import sys, time
from math import pi
import os
# ROS2
import rclpy
from rclpy.node import Node
from rclpy.action import ActionClient
from action_msgs.msg import GoalStatus
from rclpy.duration import Duration
from geometry_msgs.msg import Pose, PoseStamped, PoseWithCovarianceStamped, \
  Point, Quaternion, Twist
import tf_transformations
from tf_transformations import euler_from_quaternion
from nav2_msgs.action import NavigateToPose
# Custom
from happymini_msgs.srv import NaviLocation


class WayPointNavi(Node):
    def __init__(self):
        super().__init__('waypoint_navi')
        # Action
        self.nav_to_pose_client = ActionClient(self, NavigateToPose, 'navigate_to_pose')
        # Service
        self.navi_location_srv = self.create_service(NaviLocation, 'navi_location_server', self)
        # YAML
        self.yaml_path = os.path.join(get_package_share_directory('happymini_navigation'), 'location', 'test_navi_map.yaml')
        self.get_logger().info(f"Load the following YAML file: {self.yaml_path}")
        # Value
        self.location_name = None
        self.location_dict = {}

    def set_params(self):
       #self.load_yaml()
        with open(self.yaml_path) as f:
            self.location_dict = yaml.safe_load(f)
        # Set param
        location_params = [
                [key, value] for key, value in self.location_dict.items()
                ]
        self.declare_parameters('location_params', location_params)
        # Check param
        for key in self.location_dict.keys():
            param_name = 'location_params.' + key
            if self.has_parameter(param_name):
                self.get_logger().info(f"'{param_name}' already set")
            else:
                self.get_logger().error(f"Could not set '{param_name}'")
                break 

    def searchLocationName(self, location_name):
        if location_name in self.location_dict:
            self.location_name = location_name
            self.get_logger().info(f"{self.location_name}: {self.location_dict[self.location_name]}")
            return True
        else:
            self.get_logger().error(f"'{location_name}' doesn't exist.'")
            return False

    def set_pose(self,wp_pose):
        pose = PoseStamped()
        pose.header.stamp = self.get_clock().now().to_msg()
        pose.header.frame_id = "map"
        pose.pose.position.x = wp_pose[0]
        pose.pose.position.y = wp_pose[1]
        pose.pose.orientation.z = wp_pose[2]
        pose.pose.orientation.w = wp_pose[3]
        return pose

    def send_goal(self, pose): 
        while not self.nav_to_pose_client.wait_for_server(timeout_sec=1.0):
            self.get_logger().info("アクションサーバが起動するまで待つわ．")
        self.get_logger().info("No.{}({},{})に行きます．".format(self.wp_num+1,
                            pose.pose.position.x,pose.pose.position.y))
 
        goal_msg = NavigateToPose.Goal()
        goal_msg.pose = pose
          
        send_goal_future = self.nav_to_pose_client.send_goal_async(
                          goal_msg,feedback_callback=self.feedback_callback)
        rclpy.spin_until_future_complete(self, send_goal_future)
        self.goal_handle = send_goal_future.result()

        if not self.goal_handle.accepted:
            self.get_logger().error('No.{}は否認されました．'.format(self.wp_num+1))
            return

        self.get_logger().info('No.{}は承認されました．'.format(self.wp_num+1))
        self.result_future = self.goal_handle.get_result_async()
        self.result_future.add_done_callback(self.get_result_callback)    


    def get_result_callback(self, future): 
        if future.result().status == GoalStatus.STATUS_SUCCEEDED:
            self.get_logger().info('No.{}に着きました．'.format(str(self.wp_num+1)))
            self.wp_num += 1
        elif future.result().status == GoalStatus.STATUS_CANCELED:
            self.wp_num += 1

      
    def feedback_callback(self, msg):
        self.feedback = msg.feedback
        self.get_logger().info("残り{:.2f}[m]".format(self.feedback.distance_remaining))


    def cancel_goal(self):
        self.get_logger().info('No.{}をキャンセルします．'.format(self.wp_num+1))
        if self.result_future:
            future = self.goal_handle.cancel_goal_async()
            rclpy.spin_until_future_complete(self, future)

    def navigation_execute(self, srv_req, srv_res):
        self.
        location_param = self.get_parameter_or('location_params.location1').value
        self.get_logger().info(f"{location_param}")
        pose = self.set_pose(location_param)
        self.send_goal(pose)


def main(args=None):
    rclpy.init(args=args)
    waypoint_navi = WayPointNavi()
    waypoint_navi.set_params()
    waypoint_navi.do_navigation()
    rclpy.spin(waypoint_navi)
    waypoint.destroy_node()
    rclpy.shutdown()

